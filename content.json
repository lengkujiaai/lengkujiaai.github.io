{"meta":{"title":"冷酷加爱","subtitle":null,"description":null,"author":"史海龙","url":"http://yoursite.com"},"pages":[{"title":"我的页面名","date":"2018-11-07T04:40:09.000Z","updated":"2018-11-07T04:40:10.078Z","comments":true,"path":"我的页面名/index.html","permalink":"http://yoursite.com/我的页面名/index.html","excerpt":"","text":""},{"title":"about","date":"2018-11-13T04:18:43.000Z","updated":"2018-11-13T04:18:43.481Z","comments":true,"path":"about/index.html","permalink":"http://yoursite.com/about/index.html","excerpt":"","text":""}],"posts":[{"title":"人工智能职业方向","slug":"人工智能职业方向","date":"2018-11-12T11:02:47.000Z","updated":"2018-11-13T03:06:21.592Z","comments":true,"path":"2018/11/12/人工智能职业方向/","link":"","permalink":"http://yoursite.com/2018/11/12/人工智能职业方向/","excerpt":"","text":"人工智能职业方向学习路线建议 课程名称 难易程度理论基础 大数据的统计学基础 ★理论基础 大数据的矩阵计算基础 ★进阶工具课 R语言数据分析、展现与实例 ★进阶工具课 机器学习 ★★★进阶工具课 Python数据分析 ★进阶工具课 Python机器学习 ★★★进阶工具课 机器学习及其matlab实现—从基础到实践 ★★进阶工具课 GPU并行计算与CUDA编程 ★★进阶工具课 开源计算机视觉库OpenCV从入门到应用 ★★实战应用课 推荐系统 ★★实战应用课 Spark MLlib 机器学习算法与源码解析 ★★★实战应用课 深度学习框架Caffe学习与应用 ★★★实战应用课 自己动手实践神经网络 ★★实战应用课 计算机视觉算法详解与实战开发 ★★★实战应用课 Python自然语言处理 ★★★登峰造极高端课 人工智能前沿系列之生成式对抗网络 ★★★★登峰造极高端课 机器读心术之文本挖掘与自然语言处理 ★★★★登峰造极高端课 机器读心术之神经网络与深度学习 ★★★★","categories":[],"tags":[]},{"title":"炼数成金_黄志洪老师经典语录","slug":"炼数成金-黄志洪老师经典语录","date":"2018-11-12T11:00:19.000Z","updated":"2018-11-13T03:51:24.652Z","comments":true,"path":"2018/11/12/炼数成金-黄志洪老师经典语录/","link":"","permalink":"http://yoursite.com/2018/11/12/炼数成金-黄志洪老师经典语录/","excerpt":"","text":"反正以后大家看书的时候养成一种习惯，反正一堆参考书在这里，你可以翻完一本又一本。如果对这本书的答案还是不满意，你对这本书讲的这个知识的细节还不满意，可以继续翻下一本。如果还不满意，可以看看这本书的索引或者它在解说这段知识的时候提到的参考文献。再顺着参考文献追踪原始论文或者原始材料或者讲清这些知识点的一些综述性的文章或论文，你可以继续细看下去，这个知识就发散式的（黄老师的作用也是指一条路，把关键点敲一敲，有些细节可能无法顾及到，因为每个人都有自己想的问题。如果这个问题你没得到答案，可以通过细节继续往下推敲，通过这些顺藤摸瓜的方法再往下推敲）。 由于卷积神经网络已经用的很普遍了，很少会要求大家去从头写一个卷积神经网络。一般都不会有人这么去做，通常都是利用一个框架（caffe、TensorFlow等）去实现一个卷积神经网络。所以大家也不用很纠结这个事情，就是说我要把每一个细节、每一个梯度怎么算的都弄的很清楚。更重要的是，你怎么通过选择神经网络的工作原理以及你的经验去决定神经网络的结构（用哪些结构更容易得到更好的结果，我应该对哪些参数进行调优，比如我的结构是5x5、6x6啊，用多少个卷积层，多少个直采样层，为什么用这么多，为什么用7个而不是8个—你用更多的时间花在这上面更好）。关于这些如何学习，扔给这些框架就行了。DL09g–1分钟开始讲GPU—-必学OpenCV（预处理）、必学CUDA（速度）。可以做实验的GPU约1000元，新的就三四千元。DL09h，有讲blog中对论文的翻译（1分钟开始）:Deep learning 论文笔记之（四） CNN卷积神经网络推导和实现—Notes on Convolutional Neural Networks数据挖掘系列（10）–卷积神经网络算法的一个实现 1、Neural Network Design **书2、Neural Network and learning machines(很老了）3、Matlab43个案例分析，中文论坛4、人工神经网络理论、设计及应用（韩力群）—简明5、matlab神经网络原理与实例精解 书2：Neural Network and learning machines 这本书写的Hopfield还是很好的书5：实例精解：模拟退火算法讲的比韩力群还好403卫星课程《深度学习框架caffe学习与应用》第6课：受限波尔兹曼机简介—受限Boltzman机：马尔科夫链（数学是最能挣钱的）–&gt;导致Google诞生，Gibbs抽样 周志华，机器学习，核方法Halcon、OpenCV、Octavehttps://zhuanlan.zhihu.com/p/25138563《人工智能：一种现代的方法（第3版）》是最权威、最经典的人工智能教材，已被全世界100多个国家的1200多所大学用作教材。最新外文书https://www.packtpub.com/ 我参加7月算法的课，说实话讲得不痛不痒。ML/DL这种东西没有速成的首先英语很重要，高数基础，矩阵，概率论。。。ML:建议吴恩达视频，台湾林轩田——-DL:建议hinton视频，oxford视频——CNN：CS231n当然paper很有必要，看人家说的，不如看原作者的paper。—-最后就是实践（大多数都是python）","categories":[],"tags":[]},{"title":"seleniumum_自动化测试","slug":"seleniumum-自动化测试","date":"2018-11-12T11:00:19.000Z","updated":"2018-11-13T03:13:00.042Z","comments":true,"path":"2018/11/12/seleniumum-自动化测试/","link":"","permalink":"http://yoursite.com/2018/11/12/seleniumum-自动化测试/","excerpt":"","text":"robotframework——-关键字驱动、数据驱动jenkins——-不需要手动启动，测试可分布式运行到多个环境docker—–&gt;接口测试、单元测试还是不错的，selenium吗压力测试——-jmeter（新手入门）、locust（未来）app测试——appium性能测试 –唯一需要看书学习的 selenium 是一个web的自动化测试工具，不少学习功能自动化的同学开始首选selenium ，相因为它相比QTP有诸多有点： 免费，也不用再为破解QTP而大伤脑筋 小巧，对于不同的语言它只是一个包而已，而QTP需要下载安装1个多G 的程序。 这也是最重要的一点，不管你以前更熟悉C、 java、ruby、python、或都是C# ，你都可以通过selenium完成自动化测试，而QTP只支持VBS 支持多平台：windows、linux、MAC ，支持多浏览器：ie、ff、safari、opera、chrome 支持分布式测试用例的执行，可以把测试用例分布到不同的测试机器的执行，相当于分发机的功能。","categories":[],"tags":[]},{"title":"测试_页面对象模式","slug":"测试-页面对象模式","date":"2018-11-12T10:59:09.000Z","updated":"2018-11-13T03:05:35.168Z","comments":true,"path":"2018/11/12/测试-页面对象模式/","link":"","permalink":"http://yoursite.com/2018/11/12/测试-页面对象模式/","excerpt":"","text":"页面对象模式（Page Object Pattern）： 登陆页面的元素的位置也相应改变，如果你的测试用例没有封装过页面和元素， 每个页面都是拿webdriver 直接写，页面元素定位也分布到测试用例中，这要维护起来要全部改掉测试用例。如果你封装了页面，封装了元素，再封装一个对应的登陆Action，你的每个测试用例是调用的login.action（）。这样，你只需要改变你对象库的内容就完美解决UI变化，而不必一个个修改测试用例。","categories":[],"tags":[]},{"title":"什么是TestNG","slug":"什么是TestNG","date":"2018-11-12T10:58:26.000Z","updated":"2018-11-13T03:05:57.943Z","comments":true,"path":"2018/11/12/什么是TestNG/","link":"","permalink":"http://yoursite.com/2018/11/12/什么是TestNG/","excerpt":"","text":"TestNG是一个功能强大的测试框架，是Junit的一个增强版本。NG 代表“下一代”。TestNG框架提供了以下功能和解答我们的问题：“为什么我们需要TestNG”？1、注释可以帮助我们来组织使测试更容易。2、灵活的测试配置。3、测试例可以更容易地进行分组4、可以使用TestNG实现测试并行5、支持数据驱动测试6、内置的报告","categories":[],"tags":[]},{"title":"selenium测试学习笔记","slug":"selenium测试学习笔记","date":"2018-11-12T10:57:02.000Z","updated":"2018-11-13T03:05:53.784Z","comments":true,"path":"2018/11/12/selenium测试学习笔记/","link":"","permalink":"http://yoursite.com/2018/11/12/selenium测试学习笔记/","excerpt":"","text":"1、搭建自动化测试框架：Junit、maven、SVN、Jenkins（svn提交后，自动检测，执行并生成报告） 2、定位：id、name、css、className、tagName、linkText、Xpath（‘&gt;’可以代替空格） 3、Ctrl + shift + O 补全import4、启动Tomcat： startup，看是否起来：netstat -an | findstr “8080” 起来：LISTEN5、Jenkins起来有欢迎界面：localhost：8080 6、selenium显示等待，WebdriverWait().unit()7、js弹出窗口（现在用的少）alert box —–accept方法 confirm box ——dismiss prompt box—— 8、input[name = middle] , csscelector frameset frame:nth-child(2) frame.switch9、@target-----@Before——-执行Test方法之前执行一次 @After—-执行Test方法之后执行一次10、@BeforeClass———–实例化整个类之前执行一次 @AfterClass——实例化整个类之后执行一次11、hamcrest:断言，功能强大。 推荐书：Junit in action——-8集完 1、@Test(expectie = ArithmeticException.class) public void f() { double a = 4/0} //测试通过2、Test(timeout = 5000) { try{ Thread.sleep(6000); }catch(interruptedException){} } //测试失败3、junit 进行性能测试要复杂一些。TestNG相对简单4、RunWith（Junit4.class —Parameterized.class）5、分组测试：Junit3过时 6、@RunWith(Suite.class)，只能修饰类7、@SuiteClasses用法： @RunWith(Suite.class—只有Runner的子类可放入)、@Suite.SuiteClasses(ATest.class, Btest.class) 8、@Category({接口.class，接口.class}),若只有一个，可省略{}9、@IncludeCategory( @RunWith(Categories.class) @SuiteClasses(ATest.class,BTest.class)10、断言：assertTrue()、assertEqual()","categories":[],"tags":[]},{"title":"selenium测试例子","slug":"selenium测试例子","date":"2018-11-12T10:56:00.000Z","updated":"2018-11-13T03:05:50.383Z","comments":true,"path":"2018/11/12/selenium测试例子/","link":"","permalink":"http://yoursite.com/2018/11/12/selenium测试例子/","excerpt":"","text":"———————————————————Firefox———————————————————-package day01; import org.junit.Test;import org.openqa.selenium.By;import org.openqa.selenium.WebDriver;import org.openqa.selenium.WebElement;import org.openqa.selenium.firefox.FirefoxDriver; public class FirstTest { @Test public void firsttest() { WebDriver driver = new FirefoxDriver(); driver.manage().window().maximize(); driver.get(“http://www.baidu.com&quot;); WebElement webTxt = driver.findElement(By.id(“kw”)); webTxt.sendKeys(“selenium”); WebElement btn = driver.findElement(By.id(“su”)); btn.click(); driver.close(); } } ———————————————-chrome—————————————————————package day01; import org.junit.Test;import org.openqa.selenium.By;import org.openqa.selenium.WebDriver;import org.openqa.selenium.WebElement;import org.openqa.selenium.chrome.ChromeDriver; public class Chromefirst { @Test public void firsttest() { System.setProperty(&quot;webdriver.chrome.driver&quot;, &quot;D:\\\\Java_Workspace\\\\chromedriver.exe&quot;); WebDriver driver = new ChromeDriver(); driver.manage().window().maximize(); driver.get(&quot;http://www.baidu.com&quot;); WebElement webTxt = driver.findElement(By.id(&quot;kw&quot;)); webTxt.sendKeys(&quot;最新电影&quot;); WebElement btn = driver.findElement(By.id(&quot;su&quot;)); btn.click(); //driver.close(); //System.out.println(&quot;hello word&quot;); } } —————————————–chrome————————————————————package chrome; import org.junit.Test;import org.openqa.selenium.By;import org.openqa.selenium.WebDriver;import org.openqa.selenium.WebElement;import org.openqa.selenium.chrome.ChromeDriver; public class Enterprise { @Test public void LoginToDefaultPage() { System.setProperty(“webdriver.chrome.driver”, “D:\\Java_Workspace\\chromedriver.exe”); WebDriver driver = new ChromeDriver(); driver.manage().window().maximize(); driver.get(&quot;http://www.jiyuonline.com:8080/QuickJob/action/Common/index&quot;); //点击右上角的“企业登录”按钮 WebElement enterpriseLogin =driver.findElement(By.id(&quot;btn-clogin&quot;)); enterpriseLogin.click(); //填写“会员名” WebElement enterpriseName =driver.findElement(By.id(&quot;memname&quot;)); enterpriseName.sendKeys(&quot;内测单机构扩展公司&quot;); //填写“用户名” WebElement enterpriseUser =driver.findElement(By.id(&quot;username&quot;)); enterpriseUser.sendKeys(&quot;13146421665&quot;); //填写“密码” WebElement enterprisepwd =driver.findElement(By.id(&quot;password&quot;)); enterprisepwd.sendKeys(&quot;aaa111&quot;); //填写“验证码”---企业999999，学校9999 WebElement enterpriseCertificate =driver.findElement(By.id(&quot;authcode&quot;)); enterpriseCertificate.sendKeys(&quot;999999&quot;); //登录 WebElement enterpriseLgn = driver.findElement(By.name(&quot;submit&quot;)); enterpriseLgn.click(); //x掉第一次登录的下端欢迎 WebElement xwelcome = driver.findElement(By.className(&quot;delete&quot;)); xwelcome.click(); //driver.close(); System.out.println(&quot;hello word&quot;); } }","categories":[],"tags":[]},{"title":"达内测试课目录","slug":"达内测试课目录","date":"2018-11-12T10:54:43.000Z","updated":"2018-11-13T03:05:46.600Z","comments":true,"path":"2018/11/12/达内测试课目录/","link":"","permalink":"http://yoursite.com/2018/11/12/达内测试课目录/","excerpt":"","text":"达内测试 视频一：共计83天1、软件测试基础——————————————- 21天 2、Java——————————————- 14天3、Database———————– 7天（sqlServer3天shi，orcale四天） 4、NETCTOSS———–2天5、QTP—————————– ———–11天6、whitebox_testing—–2天 7、QTP_Project——————- 4天8、linux基础————– 3天9、LoadRunner——————- ———–10天10、LR_Project——————- 5天11、综合串讲———— 2天12、做笔试题———— 2天 selenium课程：课程一—–13课课程二——6课课程三——8课课程四——-11课","categories":[],"tags":[]},{"title":"2017年的java学习笔记","slug":"2017年的java学习笔记","date":"2018-11-12T10:53:42.000Z","updated":"2018-11-13T03:05:21.638Z","comments":true,"path":"2018/11/12/2017年的java学习笔记/","link":"","permalink":"http://yoursite.com/2018/11/12/2017年的java学习笔记/","excerpt":"","text":"5天基础—-5天面向对象—-2天高级应用——————————————–5天基础———————————————————-java—-SE—-客户端程序 —-EE—–服务器端程序 —ME—-手机程序 Java内存结构：栈——————局部信息堆——————对象code方法区——类的信息，静态方法 基本类型——-8种引用类型（很多）——基本5种—–类、接口、数组、枚举、标注import java.util.Scanner; 从事测试工具的开发很厉害文档注释 —– /* / ———生成javaDoc文档 单例模式—–一种设计模式——-保证一个类在系统中最多只创建一个对象工厂模式Factory：可以将不同的Animal子类对象看作产品，将获取这些对象的类看作工厂 class AnimalFactory { public static Animal getAnimal(){——-} //静态方法可以通过类名直接调用 }//改变业务时无需修改代码，生产产品的当然是工厂了 修饰符——protected（主要供子类使用）———private（主要本类用） 修饰符 本类 同包 子类 其他public OK——OK——–OK——-OKprotected OK——OK——–OKDefault OK——OKprivate OK Super（）处于构造函数第一行（如果不写，默认也有，在第一行）java.lang.Object类是所有类的共同父类创建子类对象会先创建父类对象 overload—重载——便于用户少记名字override—重写——-子类修改父类方法的定义多态——-1、对象不变 ——-2、编译时调用编译时类型已定义的方法 ——3、运行时调用覆盖后的方法———不能调用子类特有的方法多态——-1、基本类型多态 double 啊= 2； ——-2、类多态 ——-3、方法多态——-1）、编译时多态—–overload 2）、运行时多态—-override 父类 —-编译时的类型—–编译器理解 子类——运行时类型——JVM理解——————————————–5天面向对象—————————————————–需求分析：得到《需求分析规格说明书》是软件分析、设计、开发、测试、维护等的重要依据系统分析：问题空间。OOA，根据名词、动词将问题进行分类和归纳系统设计：解空间。OOD软件建模使用UML语言。UML统一建模语言特点：使用各种图形表达设计1、静态建模——-1）、用例图 ——–2）、类图：类的基本信息以及类的关系，使用UML工具画类图2、动态建模——-时序图：对象的生命周期。按时间顺序表示系统功能的不同步骤myeclipse提供UML插件（需要先注册） 面向对象三大特性：封装、继承、多态（一种类型，呈现多种状态）static、final、abstract： 1、不能修饰局部变量 2、可以修饰属性、方法、代码块、内部类 3、修饰的资源在类加载时被执行或初始化 4、static成员可以通过类名直接调用static修饰属性——加static，修饰类变量———–不加static，修饰实例变量static修饰方法——加static，通过类名直接调用—不加static，通过对象调用若一个类中几乎都是静态方法，称之为工具类 编译—-javac 启动编译器——-Hello.java–&gt;Hello.class运行—java Hello 启动JVM进程，加载Hello.class，执行Hello.main方法static修饰代码块{}——类体、方法体、分支、循环、实例代码块、静态代码块 class Foo { 实例代码块 对象创建时执行（先于构造方法执行） }static { 静态代码块 类加载时执行，仅一次 } 创建对象时的顺序：静态代码块（仅一次）—&gt;实例代码块—-&gt;构造方法java提升系统性能——1、使用缓存 cache 2、使用单例静态代码块：适合写初始化系统环境的程序，如缓存加载 对多态定理3的补充：静态方法—–不能被覆盖，根本就没有多态 static应用：单例模式——保证一个类在系统中最多只会创建一个实例。好处：避免大量创建对象，减少系统垃圾，降低GC启动频率。由于GC消耗系统性能，从而提高java系统性能实现——-1、构造方法私有 2、提供静态方法来获取单例 3、提供静态属性来保存单例 final修饰变量——不加final，变量——–加final，常量，一经赋值，不可改变。 ——-要么在声明时初始化，要么在构造方法中初始化修饰符位置不分先后 接口也是一种引用类型，可以理解为一种特殊的抽象类 —-1、所有属性都是public static final —-2、所有方法都是 public abstract —-3、接口没有构造方法（抽象类有）interface IA { —-；—-；—-}类 implements 接口———接口 extends 接口1、1个类可实现一个接口2、1个类可实现多个接口，多个接口用,分隔 异常：1、java.lang.Throwable: throw new Exception()2、java.lang.Exception：可以捕获并处理3、java.lang.Error：一旦出现，是严重的底层错误，无法挽回异常分类：1、运行时异常： RuntimeException类及其子类（unchecked exception)，编译器不会检测2、非运行时异常：除RuntimeException系列外的Exception以及其他子类（checked exception)，编译器会检测处理异常：1、积极处理 try—-catch—finally: printStackTrace()打印异常栈轨迹，便于调试2、消极处理 throws Exception()throw—-抛出异常，，throws—-声明抛出异常类型 java更适合商业运算、服务器端编程、企业级应用重要API：许多类和接口1、java.awt.基础包2、javax.swing.扩展包，swing编程3、java.awt.event.*事件处理包 GUI编程步骤：1、选择容器吗，JFrame窗体2、设置布局管理器，FlowLayout、BorderLayout、GridLayout3、添加组件4、添加事件处理监听器有很多种，这里关注ActionListener接口，具备事件处理方法 public void actionPerformed(ActionEvent e)","categories":[],"tags":[]},{"title":"普通话考试辅导","slug":"普通话考试辅导","date":"2018-11-12T10:50:19.000Z","updated":"2018-11-13T03:06:16.847Z","comments":true,"path":"2018/11/12/普通话考试辅导/","link":"","permalink":"http://yoursite.com/2018/11/12/普通话考试辅导/","excerpt":"","text":"100分，97-100一级甲等，92-96一级乙等，87-92二级甲等，60以下没有证书。一级甲等做为省级以上出镜播音员。一级乙等播音教学及文艺类主持及北京语文，二甲是国家规定语文老师，二乙80分，绝大多数老师。三甲公务员。丢了重考。国家立法考试。一、单音节100个，10分，3.5分钟。慢了扣0.5-1分。不考轻声儿化，要满响准二、要连读，考变调四、不要说重复（别人说过的，抄袭来背诵的）的，网上抄的扣六分，有重复的酌情扣分","categories":[],"tags":[]},{"title":"春草葳蕤","slug":"春草葳蕤","date":"2018-11-12T10:49:30.000Z","updated":"2018-11-13T03:05:38.958Z","comments":true,"path":"2018/11/12/春草葳蕤/","link":"","permalink":"http://yoursite.com/2018/11/12/春草葳蕤/","excerpt":"","text":"文/春草葳蕤许是走的太急，许是没有去顾及太多，回头看时，日影已偏西，回顾流水，早已不是昨日，回顾花儿，也早早飘离了枝头。人世已非，昨日溜走了，白驹过隙，时光匆匆，太匆匆。往事，物事人非，思来想去，心底也一般的如此透凉。真可谓风絮飘残已化萍，泥莲刚倩藕丝萦；珍重别拈香一瓣，记前生。人到情多情转薄，而今真个不多情；又到断肠回首处，泪偷零。即然，真个不多情，又为何会断肠呢？即然，真个不多情，又为何要泪偷零？难道也是一颗七巧心，连流泪也这般的玲珑，连伤心也这般的婉约。想想还真得是人到情多情转薄，这样要好的多，好的多呢，又会有多好。说出这样一句话来，又多无奈，还是情非得已？思想初恋，情窦萦绕。那些时候，总是想与你相守，哪怕守成一株开放的蔷薇，哪怕守成一树的落叶，哪怕形容枯瘦，哪怕白发翁媪，都不怕，也不去多想，心里只有爱，只想与你守成地老天荒。还记得，那时的我，身体不好，瘦弱恹恹。好似哪里也去不了，可我总想去看海，总想去看红叶，却总没有成行。那是个雨天，春游未曾成行的我，很是伤心，一个人躲在屋子里很是难过，你从山上采回山花，你将一株株山花举在我眼前，沁人心脾，醉我肺腑，你说你为我采回来了山花烂漫，摘回来了花仙子相伴。想想，花开一季，草枯一秋，人生在世，也不过就那么短短的数都数的过来的几万个日子而已，还那么的不开心，还那么的思前想后，将个一往情肠柔的透，将个一颗七巧玲珑心儿煎熬成一杯水，一杯忘情水，不敢饮，不敢喝，一喝心就碎，一饮人就憔悴了。情耐得住多少岁月与沧桑，在浓烈的背后，烈焰之下，也许归与平平淡淡，才是最真切最可靠的。然而，若果遇上一位无情人，遇上一位冷血的人儿呢？又该怎么样呢？有这样的人，无论你为她做的再多再多，她也不会感动，无论你为她付出再多再多，她依然无动于衷。从不懂感恩，从不知回报，好似别人为他做的一切都是应该，好似别人就该对他要好，要付出似得。恋爱中的人，最是甜腻的时候，我爱你，说再多遍也不腻，我想你，听再多次，也不厌。而就有人，一遍也不说，一句也不吐露，一个电话也不主动打给对方，一个信息也不主动发出一个。这样的人你说她是在爱着你，恐怕说给鬼，连鬼也不会信吧，一个爱字，连说都懒怠说，要真的将爱去付诸行动，就更懒怠去爱了吧。那就算了吧，擦肩而过吧，再也无牵扯，再也无联系。谁也不欠谁的。爱，要以爱为主线条，不为别个，只为你心我心，你侬我侬，正如黛玉说我为的是我的心时，宝玉回答：我也为的是我的心，难道你就知你的心，不知我的心不成？你心我心，是一心，你爱我爱是一种爱，情发一处，心心念念也在一处。爱情，要以情为首要，无关物质，无关地位，真可谓，风声雨声，声声入耳都是情，大事小事，事事总关情。情，千丝万缕后，爱的还是那个人，爱，千转百回后，思念的依然是最初遇见的那身影，忘也忘不掉，离也离不开，就算说好，你向你的方向走，我延我的方向行，可最后还是要相遇，还是要有牵扯，有瓜葛。有缘，是躲也躲不开的，无缘，是遇也遇不到的。一个缘字，将人间之情爱用红线缠绕，难解难分。许多时候，可能太再乎，太爱对方，才会有了许许多多，说不清道也道不白的情景情结，读红楼，让我记住了求全之毁，不虞之隙，宝黛之情爱，纯然脱俗，令人扼腕。说到此处，就又要再次提起红楼，读红楼时，总也忘不掉黛玉问的那句：“宝玉，你为什么病了？”宝玉笑着答道：“我为林姑娘病了。”是啊，就这样简简单单的一句，又抵得过多少缠绵悱恻的情语呢，相思成疾，相爱成疾，我病是因你而起，我病要好，是要你来医治，那就是你的爱呀，除此再也无药可医得。读着，眼泪就会情不自禁掉下来，咂在了心坎儿上，这就是情，这就是生死让人相许的情爱呀。想起自己，想起你，你为我所做的一切一切，不是爱，又是什么呢？无论风无论雨的陪伴，无论病无论疾的照顾，一杯水可思其恩爱，一勺羮可念其情深。这么多年你与我相守，不离不弃，你我相识到牵手，风风雨雨，一路走来，几年如一日，从未更改，情爱与日递增，从未消减。回首往事，回放爱情，心中暖意洋洋。爱情，不是虚幻，不是纸上谈兵，是真真实实的生活。一日三餐，无论粗茶淡饭，有你最香；一席一枕，无论草屋陋室，相拥梦甜。爱到深处，你心我心是一心。爱到深处，你人我人是一人。爱你就是爱自己，疼你就是疼自己，你我只有相守在一起，才是最美最完整的人生。爱就是真真实实的生活，爱就是平平淡淡的日子，互敬互爱，互珍爱互疼惜。两个人在一起，没有高贵与贫贱，没有谁为谁应该不应该。付出是甘心情愿，得到要懂得感恩。珍惜生命，真爱生活；珍惜爱情，珍爱日子，人到情多，爱已入骨入髓，铭心刻骨。真真是，情到浓时，红笺为无字，情到深处，莫到不消魂。卷帘西风，黄花为谁瘦？情到深处，情语已凝噎。恰恰还是那句，人到多情，情转薄。","categories":[],"tags":[]},{"title":"杨晓冬xdyang.ustc@gmail.com","slug":"杨晓冬xdyang-ustc-gmail-com","date":"2018-11-12T10:46:03.000Z","updated":"2018-11-13T02:53:06.170Z","comments":true,"path":"2018/11/12/杨晓冬xdyang-ustc-gmail-com/","link":"","permalink":"http://yoursite.com/2018/11/12/杨晓冬xdyang-ustc-gmail-com/","excerpt":"","text":"一、 绪论 为什么要写这篇文章图像处理与计算机视觉基础，经典以及最近发展 从2002年到现在，接触图像快十年了。虽然没有做出什么很出色的工作，不过在这个领域摸爬滚打了十年之后，发现自己对图像处理和计算机视觉的感情越来越深厚。下班之后看看相关的书籍和文献是一件很惬意的事情。平常的一大业余爱好就是收集一些相关的文章，尤其是经典的文章，到现在我的电脑里面已经有了几十G的文章。写这个文档的想法源于我前一段时间整理文献时的一个突发奇想，既然有这个多文献，何不整理出其中的经典，抓住重点来阅读，同时也可以共享给大家。于是当时即兴写了一个《图像处理与计算机视觉中的经典论文》。现在来看，那个文档写得很一般，所共享的论文也非常之有限。就算如此，还是得到了一些网友的夸奖，心里感激不尽。因此，一直想下定决心把这个工作给完善，力求做到尽量全面。 本文是对现有的图像处理和计算机视觉的经典书籍（后面会有推荐）的一个补充。一般的图像处理书籍都是介绍性的介绍某个方法，在每个领域内都会引用几十上百篇参考文献。有时候想深入研究这个领域的时候却发现文献太多，不知如何选择。但实际上在每个领域都有那么三五篇抑或更多是非读不可的经典文献。这些文献除了提出了很经典的算法，同时他们的Introduction和Related work也是对所在的领域很好的总结。读通了这几篇文献也就等于深入了解了这个领域，比单纯的看书收获要多很多。写本文的目的就是想把自己所了解到的各个领域的经典文章整理出来,不用迷失在参考文献的汪洋大海里。 二、 图像处理与计算机视觉相关的书籍 数学 我们所说的图像处理实际上就是数字图像处理，是把真实世界中的连续三维随机信号投影到传感器的二维平面上，采样并量化后得到二维矩阵。数字图像处理就是二维矩阵的处理，而从二维图像中恢复出三维场景就是计算机视觉的主要任务之一。这里面就涉及到了图像处理所涉及到的三个重要属性：连续性，二维矩阵，随机性。所对应的数学知识是高等数学（微积分），线性代数（矩阵论），概率论和随机过程。这三门课也是考研数学的三个组成部分，构成了图像处理和计算机视觉最基础的数学基础。如果想要更进一步，就要到网上搜搜林达华推荐的数学书目了。 信号处理 图像处理其实就是二维和三维信号处理，而处理的信号又有一定的随机性，因此经典信号处理和随机信号处理都是图像处理和计算机视觉中必备的理论基础。2.1经典信号处理信号与系统(第2版) Alan V.Oppenheim等著 刘树棠译离散时间信号处理(第2版) A.V.奥本海姆等著 刘树棠译数字信号处理:理论算法与实现 胡广书 (编者)2.2随机信号处理现代信号处理 张贤达著统计信号处理基础:估计与检测理论 Steven M.Kay等著 罗鹏飞等译自适应滤波器原理(第4版) Simon Haykin著 郑宝玉等译2.3 小波变换信号处理的小波导引:稀疏方法(原书第3版) tephane Malla著, 戴道清等译2.4 信息论信息论基础(原书第2版) Thomas M.Cover等著 阮吉寿等译 模式识别Pattern Recognition and Machine Learning Bishop, Christopher M. Springer模式识别(英文版)(第4版) 西奥多里德斯著Pattern Classification (2nd Edition) Richard O. Duda等著Statistical Pattern Recognition, 3rd Edition Andrew R. Webb等著模式识别(第3版) 张学工著 图像处理与计算机视觉的书籍推荐1、图像处理，分析与机器视觉 第三版 Sonka等著 艾海舟等译———–Image Processing, Analysis and Machine Vision———-(附：这本书是图像处理与计算机视觉里面比较全的一本书了，几乎涵盖了图像视觉领域的各个方面。)2、数字图像处理 第四版 冈萨雷斯等著———-Digital Image Processing 4th———-(附：数字图像处理永远的经典，现在已经出到了第三版，相当给力。我的导师曾经说过，这本书写的很优美，对写英文论文也很有帮助，建议购买英文版的。 计算机视觉：1、Computer Vision: Theory and Algorithm———(附：微软的Szeliski写的一本最新的计算机视觉著作。内容非常丰富，尤其包括了作者的研究兴趣，比如一般的书里面都没有的Image Stitching和 Image Matting等。这也从另一个侧面说明这本书的通用性不如Sonka的那本。不过作者开放了这本书的电子版，可以有选择性的阅读。—Richard Szeliski著2、Computer Vision: A Modern Approach 2nd——–MIT的经典教材。虽然已经过去十年了，还是值得一读。期待第二版—DA Forsyth等著3、Machine vision: theory, algorithms, practicalities 第三版 Davies著——-(附：为数不多的英国人写的书，偏向于工业应用。)4、数字图像处理 第四版 Pratt著———Digital Image Processing—–(附：写作风格独树一帜，也是图像处理领域很不错的一本书。网上也可以找到非常清晰的电子版。) 小结罗嗦了这么多，实际上就是几个建议：（1）基础书千万不可以扔，也不能低价处理给同学或者师弟师妹。不然到时候还得一本本从书店再买回来的。钱是一方面的问题，对着全新的书看完全没有看自己当年上过的课本有感觉。（2）遇到有相关的课，果断选修或者蹭之，比如随机过程，小波分析，模式识别，机器学习，数据挖掘，现代信号处理甚至泛函。多一些理论积累对将来科研和工作都有好处。（3）资金允许的话可以多囤一些经典的书，有的时候从牙缝里面省一点都可以买一本好书。不过千万不要像我一样只囤不看。 图像处理和计算机视觉的分类按照当前流行的分类方法，可以分为以下三部分： A.图像处理：对输入的图像做某种变换，输出仍然是图像，基本不涉及或者很少涉及图像内容的分析。比较典型的有图像变换，图像增强，图像去噪，图像压缩，图像恢复，二值图像处理等等。基于阈值的图像分割也属于图像处理的范畴。一般处理的是单幅图像。 B.图像分析：对图像的内容进行分析，提取有意义的特征，以便于后续的处理。处理的仍然是单幅图像。 C.计算机视觉：对图像分析得到的特征进行分析，提取场景的语义表示，让计算机具有人眼和人脑的能力。这时处理的是多幅图像或者序列图像，当然也包括部分单幅图像。 关于图像处理，图像分析和计算机视觉的划分并没有一个很统一的标准。一般的来说，图像处理的书籍总会或多或少的介绍一些图像分析和计算机视觉的知识，比如冈萨雷斯的数字图像处理。而计算机视觉的书籍基本上都会包括图像处理和图像分析，只是不会介绍的太详细。其实图像处理，图像分析和计算机视觉都可以纳入到计算机视觉的范畴：图像处理-&gt;低层视觉（low level vision），图像分析-&gt;中间层视觉（middle level vision），计算机视觉-&gt;高层视觉（high level vision）。这是一般的计算机视觉或者机器视觉的划分方法。在本文中，仍然按照传统的方法把这个领域划分为图像处理，图像分析和计算机视觉。 图像处理和计算机视觉开源库以及编程语言选择目前在图像处理中有两种最重要的语言：c/c++和matlab。它们各有优点：c/c++比较适合大型的工程，效率较高，而且容易转成硬件语言，是工业界的默认语言之一。而matlab实现起来比较方便，适用于算法的快速验证，而且matlab有成熟的工具箱可以使用，比如图像处理工具箱，信号处理工具箱。它们有一个共同的特点：开源的资源非常多。在学术界matlab使用的非常多，很多作者给出的源代码都是matlab版本。最近由于OpenCV的兴起和不断完善，c/c++在图像处理中的作用越来越大。总的来说，c/c++和matlab都必须掌握，最好是精通，当然侧重在c/c++上对找工作会有很大帮助。 计算机视觉/图像算法/模式识别 工程师们使用的主流编程语言 1) 重中之重：编程语言之C/C++公司面试除了考查应聘者的图像处理基础知识、思维逻辑和个人品性之外，在个人能力之中最重要的一条就是C/C++ 的功底，很多学生朋友们在学校求学阶段并不重视C/C++的学习，导致找工作时处处碰壁(不过对于来参加面试的朋友，如果有较强的逻辑思维或图像理论功底，即使C/C++ 功底弱些，企业还是会偏爱的，毕竟C/C++ 只是一个工具，只要给些时间去钻研还是可以调高的，但是逻辑思维能力和图像理论功底却不是短时期就能提高的。不过一般逻辑思维和图像理论比较强的人，其C/C 水平也是不错的)。 为啥要这么重视C/C++ 呢?答案很简单，与绝大多数其它开发语言相比：C/C++ 的应用领域无法被超越、程序运行效率无法匹敌(当然汇编语言除外)，是使用人数最多、跨平台最广的语言工具(适用于windows/linux/dsp/arm/单片机，当然还有其它一些平台)。简单的说，对于多数应用，其它语言能做的事情C/C++ 几乎都能做，其它语言不能做的事情C/C++ 也可以做。 2) 辅助工具之：MATLAB百度百科中是这么说的：“MATLAB是美国MathWorks公司出品的商业数学软件，用于算法开发、数据可视化、数据分析以及数值计算的高级技术计算语言和交互式环境，主要包括MATLAB和Simulink两大部分。” MATLAB本身是一个不错的仿真、建模工具，但不适用于应用级项目的开发，原因很简单：效率与C/C++ 无法匹敌、不夸平台。(虽然后来出来了codegen可以将MATLAB部分代码转换为C++，但自动生成的还是无法与我们自己写的并优化的C++代码相比;还有MATLAB 的mex接口能够将C++与MABLAB接口对接，既然使用了MATLAB编程，那在应用级的领域还是无法与纯C++相比) 简短说说多年前做学生时的部分学习经历：记得多年前上大学阶段大嘴起初只跟着学校的课程学习了MATLAB的图像处理相关模块(后来才学的C/C++ ),一开始觉得很兴奋，因为只需要编写很少量的代码就可以实现很强大的效果。后来大嘴进一家计算机视觉类的公司实习，发现公司主要用的是C/C++ ,因为MATLAB效率比起C/C++ 相差几倍、十几倍、甚至几十倍，而且要命的是不跨平台，只能用于windows上，后来逼的自己去学了C/C++ ,也正因如此那以后一直到现在特别是当初找工作的时候让我受益匪浅。 对于企业，特别是私企，公司除非给你充足的时间先使用MATLAB做完算法功能，然后再用C/C++ 慢慢改写，而且了解的朋友们都知道，MATLAB的精度与封装的函数标准与C/C++ 有很多不一样，改写起来相对麻烦一些，这样太慢太慢太慢了，项目不等人啊。试问人家成手能够用短时间写出C/C++ 做图像算法并马上可以投入应用，而自己却在那边慢慢磨MATLAB,然后再费老大劲改成纯C(比如需要警觉MATLAB与C++精度不一样的问题、图像处理基础函数标准不一样的问题),那么老板会比较喜欢谁呢？ 如果大家从最初就使用C/C++ ，虽然一开始不数量会写的很慢，但是随着知识量和自各种库（比如图像处理库）的积累，那么总有一天开发速度会快起来的，量的积累，质的飞跃。 说了不少，本人并不否认MATLAB，MATLAB做为建模、仿真以及一些验证的工作(比如图形分析和处理、图表显示、图像仿真、语音仿真等)还是不错的，这方面大嘴绝对力挺MATLAB,目前本人也还在使用中。 一句话：对于多数普通人来讲，如果你的目标是想进企业做为一个实力派工程师，那么大嘴建议您以C/C++ 为主、MATLAB为辅助工具做开发。 3) 辅助工具之：OPENCV随着opencv的问世，图像算法/计算机视觉/模式识别行业的门槛儿变低了，原因有以下几点：(1)opencv是以C/C ++为基础开发出来的，适用性强，windows下适用opencv开发的图像算法应用效率足够快 (2)封装了很多基础图像处理函数和视觉算法，可谓“拿来即可用”。 (3)与嵌入式接口的统一趋势，如前几年大牛们人物搞出来的EMCV(基于C/C++ )，其基础架构和接口与opencv基本一致，但个人认为EMCV很多函数功能尚不完善，目前暂时无法与opencv相比。今后很多人在windows下基于opencv开发后，可以较为轻松的移植到DSP上，这种开发模式会是一种趋势。 说了opencv几条优点,但本人并不赞同只依赖opencv做开发，无论是图像算法行业还是其它很多行业，最重要的不是用什么工具，而是自己的基础知识和逻辑思维方式，opencv封装了很多基础函数，如果朋友们未搞懂其基础原理便加以使用，这种方式并不利于锻炼自己，抽空自己实现一下opencv和MATLAB的封装好的那些基础函数吧，久而久之，你会发现自己站的高度会越来越高的。说到这里，改写一下评述MATLAB时的一句话：”对于多数普通人来讲，如果你的目标是想进企业做为一个实力派工程师，那么大嘴建议您以C/C ++为主、OPENCV和MATLAB为辅助工具做开发。” 4) 简单说说其它语言其它开发语言，比如：C#,JAVA等(还有很多很多语言，不一一举例了)都是不错的开发语言，各自有各自的主应用领域和优势，也有很多很多牛人在使用，不过做图像处理嘛，如果不偏向企业级应用(如嵌入式中)，虽然也可以用，但是了解的朋友做出来的算法效率实在不敢恭维…,又无法夸平台，在一些不要求效率的场合还是可以用的，所以请学生朋友们慎重选择开发语言，因为这与自己以后的择业以及职位方向有很大关系。 本文的特点和结构，以及适合的对象 在本文面向的对象是即将进入或者刚刚进入图像处理和计算机视觉领域的童鞋，可以在阅读书籍的同时参阅这些文献，能对书中提到的算法有比较深刻的理解。由于本文涉及到的范围比较广，如果能对计算机视觉的资深从业者也有一定的帮助，我将倍感欣慰。为了不至太误人子弟，每一篇文章都或多或少的看了一下，最不济也看了摘要(这句话实在整理之前写的，实际上由于精力有限，好多文献都只是大概扫了一眼，然后看了看google的引用数，一般在1000以上就放上来了，把这些文章细细品味一遍也是我近一两年之内的目标)。在成文的过程中，我本人也受益匪浅，希望能对大家也有所帮助。 由于个人精力和视野的关系，有一些我未涉足过的领域不敢斗胆推荐，只是列出了一些引用率比较高的文章，比如摄像机标定和立体视觉。不过将来，由于工作或者其他原因，这些领域也会接触到，我会逐步增减这些领域的文章。尽管如此，仍然会有疏漏，忘见谅。同时文章的挑选也夹带了一些个人的喜好，比如我个人比较喜欢low level方向的，尤其是IJCV和PAMI上面的文章，因此这方面也稍微多点，希望不要引起您的反感。如果有什么意见或者建议，欢迎mail我。文章和资源我都会在我的csdn blog和sina ishare同步更新。 本文的安排如下。第一部分是绪论。第二部分是图像处理中所需要用到的理论基础，主要是这个领域所涉及到的一些比较好的参考书籍。第三部分是计算机视觉中所涉及到的信号处理和模式识别文章。由于图像处理与图像分析太难区分了，第四部分集中讨论了它们。第五部分是计算机视觉部分。最后是小结。","categories":[],"tags":[]},{"title":"面试指南","slug":"华硕的第一篇文章","date":"2018-11-07T08:26:03.000Z","updated":"2018-11-13T03:06:08.327Z","comments":true,"path":"2018/11/07/华硕的第一篇文章/","link":"","permalink":"http://yoursite.com/2018/11/07/华硕的第一篇文章/","excerpt":"","text":"最后送福利：你面试10场，至少有7场，面试题来自：leetcode(username：lengkujiaai,password:abcd15063892554,email:—-)，lintcode，《剑指offer》（或者轻微改编）。如果没有，那也太不正常了。所以，去看什么书，刷什么题，你懂了吧？（这一条结论，可随便找面了10家公司的学长学姐求证。希望工作忙碌之余，答一下这个，能对各位有用）","categories":[],"tags":[]},{"title":"简单介绍","slug":"第一篇文章","date":"2018-11-07T04:39:30.000Z","updated":"2018-11-13T03:05:42.392Z","comments":true,"path":"2018/11/07/第一篇文章/","link":"","permalink":"http://yoursite.com/2018/11/07/第一篇文章/","excerpt":"","text":"2015年就有人建议在GitHub创建一个自己的博客，用来记录自己的学习。当时搭建了一下，简单写了两篇。直到最近辞职找工作（2018.10.12日辞，现在是2018.11.12日），有面试官问到了有没有自己的博客之类的记录自己学习的网站。虽然有一些记录，但只能很抱歉的说没有。最近又重新拾起来，搭建一下，把以前的一些记录（一直在有道云笔记里的部分）也放上面吧。当然，后期还会不断添加自己的一些记录和状态。。。","categories":[],"tags":[]},{"title":"Hello World","slug":"hello-world","date":"2018-11-07T04:21:35.619Z","updated":"2018-11-13T02:50:57.179Z","comments":true,"path":"2018/11/07/hello-world/","link":"","permalink":"http://yoursite.com/2018/11/07/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}]}